name: Seed Issues

on:
  workflow_dispatch:
    inputs:
      fail_on_noop:
        description: "Fail the job if nothing new is created"
        required: false
        default: "false"
      dry_run:
        description: "Don't create anything, just print what would be done"
        required: false
        default: "false"

permissions:
  contents: read
  issues: write

jobs:
  seed:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create labels, milestone, and issues from seed file
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            const seedPath = path.join(process.env.GITHUB_WORKSPACE, '.github', 'issues_seed.json');
            const seed = JSON.parse(fs.readFileSync(seedPath, 'utf8'));

            const failOnNoop = (core.getInput('fail_on_noop') || 'false').toLowerCase() === 'true';
            const dryRun = (core.getInput('dry_run') || 'false').toLowerCase() === 'true';

            const owner = context.repo.owner;
            const repo = context.repo.repo;

            // Check if Issues are enabled
            const repoInfo = await github.rest.repos.get({ owner, repo });
            if (!repoInfo.data.has_issues) {
              core.setFailed('Repository Issues are disabled. Enable Issues in Settings > General > Features and re-run.');
              return;
            }

            let labelsCreated = 0;
            let issuesCreated = 0;
            let milestoneCreated = false;
            let labelsPlanned = 0;
            let issuesPlanned = 0;

            // Ensure labels exist
            const desiredLabels = seed.labels || [];
            const existingLabels = await github.paginate(github.rest.issues.listLabelsForRepo, { owner, repo, per_page: 100 });
      const existingLabelNames = new Set(existingLabels.map(l => l.name));

      for (const l of desiredLabels) {
              if (!existingLabelNames.has(l.name)) {
                if (dryRun) {
                  core.info(`[dry-run] Would create label: ${l.name}`);
                  labelsPlanned++;
                } else {
                  core.info(`Creating missing label: ${l.name}`);
                  await github.rest.issues.createLabel({ owner, repo, name: l.name, color: l.color || 'cccccc', description: l.description || '' });
                  labelsCreated++;
                }
              }
            }

            // Ensure milestone exists (if provided)
            let milestoneNumber = undefined;
            if (seed.milestone && seed.milestone.title) {
              const milestones = await github.paginate(github.rest.issues.listMilestones, { owner, repo, state: 'all', per_page: 100 });
              const found = milestones.find(m => m.title === seed.milestone.title);
              if (found) {
                milestoneNumber = found.number;
                core.info(`Using existing milestone: ${found.title} (#${found.number})`);
              } else {
                if (dryRun) {
                  core.info(`[dry-run] Would create milestone: ${seed.milestone.title}`);
                  milestoneCreated = true; // mark planned for summary
                } else {
                  const created = await github.rest.issues.createMilestone({ owner, repo, title: seed.milestone.title, description: seed.milestone.description || '' });
                  milestoneNumber = created.data.number;
                  milestoneCreated = true;
                  core.info(`Created milestone: ${seed.milestone.title} (#${milestoneNumber})`);
                }
              }
            }

            // Fetch existing issues (titles) to avoid duplicates
            const existingIssues = await github.paginate(github.rest.issues.listForRepo, { owner, repo, state: 'all', per_page: 100 });
            const existingTitles = new Set(existingIssues.map(i => i.title));

            for (const issue of seed.issues) {
              if (existingTitles.has(issue.title)) {
                core.info(`Skipping existing issue: ${issue.title}`);
                continue;
              }

              const labels = issue.labels || [];
              if (dryRun) {
                core.info(`[dry-run] Would create issue: ${issue.title}`);
                issuesPlanned++;
              } else {
                const res = await github.rest.issues.create({
                  owner,
                  repo,
                  title: issue.title,
                  body: issue.body,
                  labels,
                  milestone: milestoneNumber,
                  assignees: issue.assignees || [],
                });
                issuesCreated++;
                core.info(`Created issue #${res.data.number}: ${issue.title}`);
              }
            }

            // Summarize
            await core.summary
              .addHeading('Seed Issues Summary')
              .addList([
                `Labels ${dryRun ? 'planned' : 'created'}: ${dryRun ? labelsPlanned : labelsCreated}`,
                `Milestone ${dryRun ? 'planned' : 'created'}: ${milestoneCreated}`,
                `Issues ${dryRun ? 'planned' : 'created'}: ${dryRun ? issuesPlanned : issuesCreated}`,
              ])
              .write();

            const nothingChanged = (labelsCreated === 0 && !milestoneCreated && issuesCreated === 0);
            if (nothingChanged) {
              const msg = 'Nothing to create. Likely items already exist or Issues are disabled.';
              if (dryRun || !failOnNoop) {
                core.notice(msg);
              } else {
                core.setFailed(msg);
              }
            }
